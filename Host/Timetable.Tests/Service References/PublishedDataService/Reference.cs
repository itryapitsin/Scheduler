//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Timetable.Host.Tests.PublishedDataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.UserRole))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Auditorium))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.AuditoriumType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Building))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.ScheduleInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Course))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Department))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Faculty))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Branch))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Speciality))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Lecturer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Position))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Schedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Time))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.WeekType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.StudyYear))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.Tutorial))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timetable.Host.Tests.PublishedDataService.TutorialType))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActual {
            get {
                return this.IsActualField;
            }
            set {
                if ((this.IsActualField.Equals(value) != true)) {
                    this.IsActualField = value;
                    this.RaisePropertyChanged("IsActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Personalization", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class User : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.UserRole RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.UserRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRole", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Personalization", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class UserRole : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Auditorium", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Auditorium : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuditoriumTypIdeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.AuditoriumType AuditoriumTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Building BuildingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.TutorialType[] TutorialApplicabilitiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuditoriumTypIde {
            get {
                return this.AuditoriumTypIdeField;
            }
            set {
                if ((this.AuditoriumTypIdeField.Equals(value) != true)) {
                    this.AuditoriumTypIdeField = value;
                    this.RaisePropertyChanged("AuditoriumTypIde");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.AuditoriumType AuditoriumType {
            get {
                return this.AuditoriumTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditoriumTypeField, value) != true)) {
                    this.AuditoriumTypeField = value;
                    this.RaisePropertyChanged("AuditoriumType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Building Building {
            get {
                return this.BuildingField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildingField, value) != true)) {
                    this.BuildingField = value;
                    this.RaisePropertyChanged("Building");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildingId {
            get {
                return this.BuildingIdField;
            }
            set {
                if ((this.BuildingIdField.Equals(value) != true)) {
                    this.BuildingIdField = value;
                    this.RaisePropertyChanged("BuildingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.TutorialType[] TutorialApplicabilities {
            get {
                return this.TutorialApplicabilitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.TutorialApplicabilitiesField, value) != true)) {
                    this.TutorialApplicabilitiesField = value;
                    this.RaisePropertyChanged("TutorialApplicabilities");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditoriumType", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class AuditoriumType : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Auditorium[] AuditoriumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Auditorium[] Auditoriums {
            get {
                return this.AuditoriumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditoriumsField, value) != true)) {
                    this.AuditoriumsField = value;
                    this.RaisePropertyChanged("Auditoriums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Building", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Building : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleInfo", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ScheduleInfo : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Course[] CoursesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Department DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DepartmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Faculty[] FacultiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Group[] GroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HoursPerWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Lecturer LecturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LecturerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Auditorium[] LikeAuditoriumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Schedule[] SchedulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SemesterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Speciality[] SpecialitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.StudyYear StudyYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StudyYearIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubgroupCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Tutorial TutorialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TutorialIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.TutorialType TutorialTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TutorialTypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Course[] Courses {
            get {
                return this.CoursesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoursesField, value) != true)) {
                    this.CoursesField = value;
                    this.RaisePropertyChanged("Courses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Department Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Faculty[] Faculties {
            get {
                return this.FacultiesField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultiesField, value) != true)) {
                    this.FacultiesField = value;
                    this.RaisePropertyChanged("Faculties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Group[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HoursPerWeek {
            get {
                return this.HoursPerWeekField;
            }
            set {
                if ((this.HoursPerWeekField.Equals(value) != true)) {
                    this.HoursPerWeekField = value;
                    this.RaisePropertyChanged("HoursPerWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Lecturer Lecturer {
            get {
                return this.LecturerField;
            }
            set {
                if ((object.ReferenceEquals(this.LecturerField, value) != true)) {
                    this.LecturerField = value;
                    this.RaisePropertyChanged("Lecturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LecturerId {
            get {
                return this.LecturerIdField;
            }
            set {
                if ((this.LecturerIdField.Equals(value) != true)) {
                    this.LecturerIdField = value;
                    this.RaisePropertyChanged("LecturerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Auditorium[] LikeAuditoriums {
            get {
                return this.LikeAuditoriumsField;
            }
            set {
                if ((object.ReferenceEquals(this.LikeAuditoriumsField, value) != true)) {
                    this.LikeAuditoriumsField = value;
                    this.RaisePropertyChanged("LikeAuditoriums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Schedule[] Schedules {
            get {
                return this.SchedulesField;
            }
            set {
                if ((object.ReferenceEquals(this.SchedulesField, value) != true)) {
                    this.SchedulesField = value;
                    this.RaisePropertyChanged("Schedules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Semester {
            get {
                return this.SemesterField;
            }
            set {
                if ((this.SemesterField.Equals(value) != true)) {
                    this.SemesterField = value;
                    this.RaisePropertyChanged("Semester");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Speciality[] Specialities {
            get {
                return this.SpecialitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialitiesField, value) != true)) {
                    this.SpecialitiesField = value;
                    this.RaisePropertyChanged("Specialities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.StudyYear StudyYear {
            get {
                return this.StudyYearField;
            }
            set {
                if ((object.ReferenceEquals(this.StudyYearField, value) != true)) {
                    this.StudyYearField = value;
                    this.RaisePropertyChanged("StudyYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StudyYearId {
            get {
                return this.StudyYearIdField;
            }
            set {
                if ((this.StudyYearIdField.Equals(value) != true)) {
                    this.StudyYearIdField = value;
                    this.RaisePropertyChanged("StudyYearId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubgroupCount {
            get {
                return this.SubgroupCountField;
            }
            set {
                if ((this.SubgroupCountField.Equals(value) != true)) {
                    this.SubgroupCountField = value;
                    this.RaisePropertyChanged("SubgroupCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Tutorial Tutorial {
            get {
                return this.TutorialField;
            }
            set {
                if ((object.ReferenceEquals(this.TutorialField, value) != true)) {
                    this.TutorialField = value;
                    this.RaisePropertyChanged("Tutorial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TutorialId {
            get {
                return this.TutorialIdField;
            }
            set {
                if ((this.TutorialIdField.Equals(value) != true)) {
                    this.TutorialIdField = value;
                    this.RaisePropertyChanged("TutorialId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.TutorialType TutorialType {
            get {
                return this.TutorialTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TutorialTypeField, value) != true)) {
                    this.TutorialTypeField = value;
                    this.RaisePropertyChanged("TutorialType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TutorialTypeId {
            get {
                return this.TutorialTypeIdField;
            }
            set {
                if ((this.TutorialTypeIdField.Equals(value) != true)) {
                    this.TutorialTypeIdField = value;
                    this.RaisePropertyChanged("TutorialTypeId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Course", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Course : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Department", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Department : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Faculty FacultyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FacultyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Lecturer[] LecturersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Faculty Faculty {
            get {
                return this.FacultyField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultyField, value) != true)) {
                    this.FacultyField = value;
                    this.RaisePropertyChanged("Faculty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FacultyId {
            get {
                return this.FacultyIdField;
            }
            set {
                if ((this.FacultyIdField.Equals(value) != true)) {
                    this.FacultyIdField = value;
                    this.RaisePropertyChanged("FacultyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] Lecturers {
            get {
                return this.LecturersField;
            }
            set {
                if ((object.ReferenceEquals(this.LecturersField, value) != true)) {
                    this.LecturersField = value;
                    this.RaisePropertyChanged("Lecturers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Faculty", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Faculty : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Branch BranchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Speciality[] SpecialitiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Branch Branch {
            get {
                return this.BranchField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchField, value) != true)) {
                    this.BranchField = value;
                    this.RaisePropertyChanged("Branch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Speciality[] Specialities {
            get {
                return this.SpecialitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialitiesField, value) != true)) {
                    this.SpecialitiesField = value;
                    this.RaisePropertyChanged("Specialities");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Branch", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Branch : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Faculty[] FacultiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Faculty[] Faculties {
            get {
                return this.FacultiesField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultiesField, value) != true)) {
                    this.FacultiesField = value;
                    this.RaisePropertyChanged("Faculties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Speciality", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Speciality : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Faculty[] FacultiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Group[] GroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Faculty[] Faculties {
            get {
                return this.FacultiesField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultiesField, value) != true)) {
                    this.FacultiesField = value;
                    this.RaisePropertyChanged("Faculties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Group[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Group : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Course CourseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CourseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Group ParentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Speciality SpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpecialityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StudentsCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Course Course {
            get {
                return this.CourseField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseField, value) != true)) {
                    this.CourseField = value;
                    this.RaisePropertyChanged("Course");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CourseId {
            get {
                return this.CourseIdField;
            }
            set {
                if ((this.CourseIdField.Equals(value) != true)) {
                    this.CourseIdField = value;
                    this.RaisePropertyChanged("CourseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Group Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Speciality Speciality {
            get {
                return this.SpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityField, value) != true)) {
                    this.SpecialityField = value;
                    this.RaisePropertyChanged("Speciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpecialityId {
            get {
                return this.SpecialityIdField;
            }
            set {
                if ((this.SpecialityIdField.Equals(value) != true)) {
                    this.SpecialityIdField = value;
                    this.RaisePropertyChanged("SpecialityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StudentsCount {
            get {
                return this.StudentsCountField;
            }
            set {
                if ((this.StudentsCountField.Equals(value) != true)) {
                    this.StudentsCountField = value;
                    this.RaisePropertyChanged("StudentsCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lecturer", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Lecturer : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Department[] DepartmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddlenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Position[] PositionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Department[] Departments {
            get {
                return this.DepartmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentsField, value) != true)) {
                    this.DepartmentsField = value;
                    this.RaisePropertyChanged("Departments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Middlename {
            get {
                return this.MiddlenameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddlenameField, value) != true)) {
                    this.MiddlenameField = value;
                    this.RaisePropertyChanged("Middlename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Position[] Positions {
            get {
                return this.PositionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionsField, value) != true)) {
                    this.PositionsField = value;
                    this.RaisePropertyChanged("Positions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Position : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Lecturer[] LecturersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] Lecturers {
            get {
                return this.LecturersField;
            }
            set {
                if ((object.ReferenceEquals(this.LecturersField, value) != true)) {
                    this.LecturersField = value;
                    this.RaisePropertyChanged("Lecturers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Schedule", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Schedule : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Auditorium AuditoriumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuditoriumIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayOfWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Time PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PeriodIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo ScheduleInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScheduleInfoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.WeekType WeekTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeekTypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Auditorium Auditorium {
            get {
                return this.AuditoriumField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditoriumField, value) != true)) {
                    this.AuditoriumField = value;
                    this.RaisePropertyChanged("Auditorium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuditoriumId {
            get {
                return this.AuditoriumIdField;
            }
            set {
                if ((this.AuditoriumIdField.Equals(value) != true)) {
                    this.AuditoriumIdField = value;
                    this.RaisePropertyChanged("AuditoriumId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((this.DayOfWeekField.Equals(value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Time Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PeriodId {
            get {
                return this.PeriodIdField;
            }
            set {
                if ((this.PeriodIdField.Equals(value) != true)) {
                    this.PeriodIdField = value;
                    this.RaisePropertyChanged("PeriodId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo ScheduleInfo {
            get {
                return this.ScheduleInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoField, value) != true)) {
                    this.ScheduleInfoField = value;
                    this.RaisePropertyChanged("ScheduleInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScheduleInfoId {
            get {
                return this.ScheduleInfoIdField;
            }
            set {
                if ((this.ScheduleInfoIdField.Equals(value) != true)) {
                    this.ScheduleInfoIdField = value;
                    this.RaisePropertyChanged("ScheduleInfoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.WeekType WeekType {
            get {
                return this.WeekTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekTypeField, value) != true)) {
                    this.WeekTypeField = value;
                    this.RaisePropertyChanged("WeekType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WeekTypeId {
            get {
                return this.WeekTypeIdField;
            }
            set {
                if ((this.WeekTypeIdField.Equals(value) != true)) {
                    this.WeekTypeIdField = value;
                    this.RaisePropertyChanged("WeekTypeId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Time", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Time : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Building BuildingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Building Building {
            get {
                return this.BuildingField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildingField, value) != true)) {
                    this.BuildingField = value;
                    this.RaisePropertyChanged("Building");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildingId {
            get {
                return this.BuildingIdField;
            }
            set {
                if ((this.BuildingIdField.Equals(value) != true)) {
                    this.BuildingIdField = value;
                    this.RaisePropertyChanged("BuildingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeekType", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class WeekType : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StudyYear", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StudyYear : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartYearField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartYear {
            get {
                return this.StartYearField;
            }
            set {
                if ((this.StartYearField.Equals(value) != true)) {
                    this.StartYearField = value;
                    this.RaisePropertyChanged("StartYear");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tutorial", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Tutorial : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Faculty FacultyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FacultyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Speciality SpecialityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SpecialityIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Faculty Faculty {
            get {
                return this.FacultyField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultyField, value) != true)) {
                    this.FacultyField = value;
                    this.RaisePropertyChanged("Faculty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FacultyId {
            get {
                return this.FacultyIdField;
            }
            set {
                if ((this.FacultyIdField.Equals(value) != true)) {
                    this.FacultyIdField = value;
                    this.RaisePropertyChanged("FacultyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] ScheduleInfoes {
            get {
                return this.ScheduleInfoesField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleInfoesField, value) != true)) {
                    this.ScheduleInfoesField = value;
                    this.RaisePropertyChanged("ScheduleInfoes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Speciality Speciality {
            get {
                return this.SpecialityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialityField, value) != true)) {
                    this.SpecialityField = value;
                    this.RaisePropertyChanged("Speciality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SpecialityId {
            get {
                return this.SpecialityIdField;
            }
            set {
                if ((this.SpecialityIdField.Equals(value) != true)) {
                    this.SpecialityIdField = value;
                    this.RaisePropertyChanged("SpecialityId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TutorialType", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Base.Entities.Scheduler", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class TutorialType : Timetable.Host.Tests.PublishedDataService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Auditorium[] AuditoriumApplicabilitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Auditorium[] AuditoriumApplicabilities {
            get {
                return this.AuditoriumApplicabilitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.AuditoriumApplicabilitiesField, value) != true)) {
                    this.AuditoriumApplicabilitiesField = value;
                    this.RaisePropertyChanged("AuditoriumApplicabilities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Host.Interfaces")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.BaseEntity ObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timetable.Host.Tests.PublishedDataService.Status StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.BaseEntity Object {
            get {
                return this.ObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectField, value) != true)) {
                    this.ObjectField = value;
                    this.RaisePropertyChanged("Object");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timetable.Host.Tests.PublishedDataService.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Timetable.Host.Interfaces")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fail = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PublishedDataService.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Add", ReplyAction="http://tempuri.org/IBaseService/AddResponse")]
        Timetable.Host.Tests.PublishedDataService.OperationResult Add(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Add", ReplyAction="http://tempuri.org/IBaseService/AddResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> AddAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Update", ReplyAction="http://tempuri.org/IBaseService/UpdateResponse")]
        Timetable.Host.Tests.PublishedDataService.OperationResult Update(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Update", ReplyAction="http://tempuri.org/IBaseService/UpdateResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> UpdateAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Delete", ReplyAction="http://tempuri.org/IBaseService/DeleteResponse")]
        Timetable.Host.Tests.PublishedDataService.OperationResult Delete(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Delete", ReplyAction="http://tempuri.org/IBaseService/DeleteResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> DeleteAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetBranches", ReplyAction="http://tempuri.org/IDataService/GetBranchesResponse")]
        Timetable.Host.Tests.PublishedDataService.Branch[] GetBranches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetBranches", ReplyAction="http://tempuri.org/IDataService/GetBranchesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Branch[]> GetBranchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAuditoriums", ReplyAction="http://tempuri.org/IDataService/GetAuditoriumsResponse")]
        Timetable.Host.Tests.PublishedDataService.Auditorium[] GetAuditoriums(Timetable.Host.Tests.PublishedDataService.Building building, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAuditoriums", ReplyAction="http://tempuri.org/IDataService/GetAuditoriumsResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Auditorium[]> GetAuditoriumsAsync(Timetable.Host.Tests.PublishedDataService.Building building, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFreeAuditoriums", ReplyAction="http://tempuri.org/IDataService/GetFreeAuditoriumsResponse")]
        Timetable.Host.Tests.PublishedDataService.Auditorium[] GetFreeAuditoriums(Timetable.Host.Tests.PublishedDataService.Building building, int day, Timetable.Host.Tests.PublishedDataService.WeekType weekType, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType, int capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFreeAuditoriums", ReplyAction="http://tempuri.org/IDataService/GetFreeAuditoriumsResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Auditorium[]> GetFreeAuditoriumsAsync(Timetable.Host.Tests.PublishedDataService.Building building, int day, Timetable.Host.Tests.PublishedDataService.WeekType weekType, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType, int capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAuditoriumTypes", ReplyAction="http://tempuri.org/IDataService/GetAuditoriumTypesResponse")]
        Timetable.Host.Tests.PublishedDataService.AuditoriumType[] GetAuditoriumTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAuditoriumTypes", ReplyAction="http://tempuri.org/IDataService/GetAuditoriumTypesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.AuditoriumType[]> GetAuditoriumTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetBuildings", ReplyAction="http://tempuri.org/IDataService/GetBuildingsResponse")]
        Timetable.Host.Tests.PublishedDataService.Building[] GetBuildings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetBuildings", ReplyAction="http://tempuri.org/IDataService/GetBuildingsResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Building[]> GetBuildingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetCources", ReplyAction="http://tempuri.org/IDataService/GetCourcesResponse")]
        Timetable.Host.Tests.PublishedDataService.Course[] GetCources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetCources", ReplyAction="http://tempuri.org/IDataService/GetCourcesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Course[]> GetCourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDeparmtents", ReplyAction="http://tempuri.org/IDataService/GetDeparmtentsResponse")]
        Timetable.Host.Tests.PublishedDataService.Department[] GetDeparmtents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDeparmtents", ReplyAction="http://tempuri.org/IDataService/GetDeparmtentsResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Department[]> GetDeparmtentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFaculties", ReplyAction="http://tempuri.org/IDataService/GetFacultiesResponse")]
        Timetable.Host.Tests.PublishedDataService.Faculty[] GetFaculties(Timetable.Host.Tests.PublishedDataService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetFaculties", ReplyAction="http://tempuri.org/IDataService/GetFacultiesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Faculty[]> GetFacultiesAsync(Timetable.Host.Tests.PublishedDataService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupById", ReplyAction="http://tempuri.org/IDataService/GetGroupByIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Group GetGroupById(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupById", ReplyAction="http://tempuri.org/IDataService/GetGroupByIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group> GetGroupByIdAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetsSubGroupsByGroupId", ReplyAction="http://tempuri.org/IDataService/GetsSubGroupsByGroupIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Group[] GetsSubGroupsByGroupId(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetsSubGroupsByGroupId", ReplyAction="http://tempuri.org/IDataService/GetsSubGroupsByGroupIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetsSubGroupsByGroupIdAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupsForCourse", ReplyAction="http://tempuri.org/IDataService/GetGroupsForCourseResponse")]
        Timetable.Host.Tests.PublishedDataService.Group[] GetGroupsForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupsForCourse", ReplyAction="http://tempuri.org/IDataService/GetGroupsForCourseResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetGroupsForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupsForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetGroupsForSpecialityResponse")]
        Timetable.Host.Tests.PublishedDataService.Group[] GetGroupsForSpeciality(Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetGroupsForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetGroupsForSpecialityResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetGroupsForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByDeparmentId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByDeparmentIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByDeparmentId(Timetable.Host.Tests.PublishedDataService.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByDeparmentId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByDeparmentIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByDeparmentIdAsync(Timetable.Host.Tests.PublishedDataService.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByTutorialId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByTutorialIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByTutorialId(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByTutorialId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByTutorialIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByTutorialIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByTutorialIdAndTutorialTypeId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByTutorialIdAndTutorialTypeIdResponse" +
            "")]
        Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByTutorialIdAndTutorialTypeId(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByTutorialIdAndTutorialTypeId", ReplyAction="http://tempuri.org/IDataService/GetLecturersByTutorialIdAndTutorialTypeIdResponse" +
            "")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByTutorialIdAndTutorialTypeIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturerByFirstMiddleLastname", ReplyAction="http://tempuri.org/IDataService/GetLecturerByFirstMiddleLastnameResponse")]
        Timetable.Host.Tests.PublishedDataService.Lecturer GetLecturerByFirstMiddleLastname(string arg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturerByFirstMiddleLastname", ReplyAction="http://tempuri.org/IDataService/GetLecturerByFirstMiddleLastnameResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer> GetLecturerByFirstMiddleLastnameAsync(string arg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByFirstMiddleLastname", ReplyAction="http://tempuri.org/IDataService/GetLecturersByFirstMiddleLastnameResponse")]
        Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByFirstMiddleLastname(string arg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetLecturersByFirstMiddleLastname", ReplyAction="http://tempuri.org/IDataService/GetLecturersByFirstMiddleLastnameResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByFirstMiddleLastnameAsync(string arg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForScheduleInfoes", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForScheduleInfoesResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForScheduleInfoes(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForScheduleInfoes", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForScheduleInfoesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForScheduleInfoesAsync(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoById", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoByIdResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo GetScheduleInfoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoById", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoByIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo> GetScheduleInfoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForCourse", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForCourseResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForCourse", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForCourseResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForSpecialityResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForSpecialityResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForGroup", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForGroupResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialtype, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForGroup", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForGroupResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialtype, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForDepartment", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForDepartmentResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForDepartment(Timetable.Host.Tests.PublishedDataService.Department department, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleInfoesForDepartment", ReplyAction="http://tempuri.org/IDataService/GetScheduleInfoesForDepartmentResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForDepartmentAsync(Timetable.Host.Tests.PublishedDataService.Department department, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUnscheduledInfoes", ReplyAction="http://tempuri.org/IDataService/GetUnscheduledInfoesResponse")]
        Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetUnscheduledInfoes(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetUnscheduledInfoes", ReplyAction="http://tempuri.org/IDataService/GetUnscheduledInfoesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetUnscheduledInfoesAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/CountScheduleCollisions", ReplyAction="http://tempuri.org/IDataService/CountScheduleCollisionsResponse")]
        int CountScheduleCollisions(int day, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.WeekType weekType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/CountScheduleCollisions", ReplyAction="http://tempuri.org/IDataService/CountScheduleCollisionsResponse")]
        System.Threading.Tasks.Task<int> CountScheduleCollisionsAsync(int day, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.WeekType weekType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesByDayTime", ReplyAction="http://tempuri.org/IDataService/GetSchedulesByDayTimeResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesByDayTime(int day, Timetable.Host.Tests.PublishedDataService.Time time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesByDayTime", ReplyAction="http://tempuri.org/IDataService/GetSchedulesByDayTimeResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesByDayTimeAsync(int day, Timetable.Host.Tests.PublishedDataService.Time time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForCourse", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForCourseResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForCourse", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForCourseResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForGroup", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForGroupResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForGroup", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForGroupResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/CountSchedulesForScheduleInfoes", ReplyAction="http://tempuri.org/IDataService/CountSchedulesForScheduleInfoesResponse")]
        int CountSchedulesForScheduleInfoes(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/CountSchedulesForScheduleInfoes", ReplyAction="http://tempuri.org/IDataService/CountSchedulesForScheduleInfoesResponse")]
        System.Threading.Tasks.Task<int> CountSchedulesForScheduleInfoesAsync(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForSpecialityResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForSpecialityResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForLecturer", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForLecturerResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForLecturer(Timetable.Host.Tests.PublishedDataService.Lecturer lecturer, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForLecturer", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForLecturerResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForLecturerAsync(Timetable.Host.Tests.PublishedDataService.Lecturer lecturer, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForAuditorium", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForAuditoriumResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForAuditorium(Timetable.Host.Tests.PublishedDataService.Auditorium auditorium, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSchedulesForAuditorium", ReplyAction="http://tempuri.org/IDataService/GetSchedulesForAuditoriumResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForAuditoriumAsync(Timetable.Host.Tests.PublishedDataService.Auditorium auditorium, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleById", ReplyAction="http://tempuri.org/IDataService/GetScheduleByIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Schedule GetScheduleById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetScheduleById", ReplyAction="http://tempuri.org/IDataService/GetScheduleByIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule> GetScheduleByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSpecialities", ReplyAction="http://tempuri.org/IDataService/GetSpecialitiesResponse")]
        Timetable.Host.Tests.PublishedDataService.Speciality[] GetSpecialities(Timetable.Host.Tests.PublishedDataService.Faculty faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetSpecialities", ReplyAction="http://tempuri.org/IDataService/GetSpecialitiesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Speciality[]> GetSpecialitiesAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTimes", ReplyAction="http://tempuri.org/IDataService/GetTimesResponse")]
        Timetable.Host.Tests.PublishedDataService.Time[] GetTimes(Timetable.Host.Tests.PublishedDataService.Building building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTimes", ReplyAction="http://tempuri.org/IDataService/GetTimesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Time[]> GetTimesAsync(Timetable.Host.Tests.PublishedDataService.Building building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialById", ReplyAction="http://tempuri.org/IDataService/GetTutorialByIdResponse")]
        Timetable.Host.Tests.PublishedDataService.Tutorial GetTutorialById(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialById", ReplyAction="http://tempuri.org/IDataService/GetTutorialByIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial> GetTutorialByIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForGroup", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForGroupResponse")]
        Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForGroup", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForGroupResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForSpecialityResponse")]
        Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForSpeciality", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForSpecialityResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForCourse", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForCourseResponse")]
        Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialsForCourse", ReplyAction="http://tempuri.org/IDataService/GetTutorialsForCourseResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialTypes", ReplyAction="http://tempuri.org/IDataService/GetTutorialTypesResponse")]
        Timetable.Host.Tests.PublishedDataService.TutorialType[] GetTutorialTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialTypes", ReplyAction="http://tempuri.org/IDataService/GetTutorialTypesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.TutorialType[]> GetTutorialTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialTypeById", ReplyAction="http://tempuri.org/IDataService/GetTutorialTypeByIdResponse")]
        Timetable.Host.Tests.PublishedDataService.TutorialType GetTutorialTypeById(Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetTutorialTypeById", ReplyAction="http://tempuri.org/IDataService/GetTutorialTypeByIdResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.TutorialType> GetTutorialTypeByIdAsync(Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetWeekTypes", ReplyAction="http://tempuri.org/IDataService/GetWeekTypesResponse")]
        Timetable.Host.Tests.PublishedDataService.WeekType[] GetWeekTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetWeekTypes", ReplyAction="http://tempuri.org/IDataService/GetWeekTypesResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.WeekType[]> GetWeekTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetStudyYears", ReplyAction="http://tempuri.org/IDataService/GetStudyYearsResponse")]
        Timetable.Host.Tests.PublishedDataService.StudyYear[] GetStudyYears();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetStudyYears", ReplyAction="http://tempuri.org/IDataService/GetStudyYearsResponse")]
        System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.StudyYear[]> GetStudyYearsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : Timetable.Host.Tests.PublishedDataService.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<Timetable.Host.Tests.PublishedDataService.IDataService>, Timetable.Host.Tests.PublishedDataService.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Timetable.Host.Tests.PublishedDataService.OperationResult Add(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> AddAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public Timetable.Host.Tests.PublishedDataService.OperationResult Update(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> UpdateAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public Timetable.Host.Tests.PublishedDataService.OperationResult Delete(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.OperationResult> DeleteAsync(Timetable.Host.Tests.PublishedDataService.BaseEntity entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Branch[] GetBranches() {
            return base.Channel.GetBranches();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Branch[]> GetBranchesAsync() {
            return base.Channel.GetBranchesAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.Auditorium[] GetAuditoriums(Timetable.Host.Tests.PublishedDataService.Building building, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType) {
            return base.Channel.GetAuditoriums(building, auditoriumType);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Auditorium[]> GetAuditoriumsAsync(Timetable.Host.Tests.PublishedDataService.Building building, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType) {
            return base.Channel.GetAuditoriumsAsync(building, auditoriumType);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Auditorium[] GetFreeAuditoriums(Timetable.Host.Tests.PublishedDataService.Building building, int day, Timetable.Host.Tests.PublishedDataService.WeekType weekType, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType, int capacity) {
            return base.Channel.GetFreeAuditoriums(building, day, weekType, time, tutorialType, auditoriumType, capacity);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Auditorium[]> GetFreeAuditoriumsAsync(Timetable.Host.Tests.PublishedDataService.Building building, int day, Timetable.Host.Tests.PublishedDataService.WeekType weekType, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType, Timetable.Host.Tests.PublishedDataService.AuditoriumType auditoriumType, int capacity) {
            return base.Channel.GetFreeAuditoriumsAsync(building, day, weekType, time, tutorialType, auditoriumType, capacity);
        }
        
        public Timetable.Host.Tests.PublishedDataService.AuditoriumType[] GetAuditoriumTypes() {
            return base.Channel.GetAuditoriumTypes();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.AuditoriumType[]> GetAuditoriumTypesAsync() {
            return base.Channel.GetAuditoriumTypesAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.Building[] GetBuildings() {
            return base.Channel.GetBuildings();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Building[]> GetBuildingsAsync() {
            return base.Channel.GetBuildingsAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.Course[] GetCources() {
            return base.Channel.GetCources();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Course[]> GetCourcesAsync() {
            return base.Channel.GetCourcesAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.Department[] GetDeparmtents() {
            return base.Channel.GetDeparmtents();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Department[]> GetDeparmtentsAsync() {
            return base.Channel.GetDeparmtentsAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.Faculty[] GetFaculties(Timetable.Host.Tests.PublishedDataService.Branch branch) {
            return base.Channel.GetFaculties(branch);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Faculty[]> GetFacultiesAsync(Timetable.Host.Tests.PublishedDataService.Branch branch) {
            return base.Channel.GetFacultiesAsync(branch);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Group GetGroupById(int groupId) {
            return base.Channel.GetGroupById(groupId);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group> GetGroupByIdAsync(int groupId) {
            return base.Channel.GetGroupByIdAsync(groupId);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Group[] GetsSubGroupsByGroupId(int groupId) {
            return base.Channel.GetsSubGroupsByGroupId(groupId);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetsSubGroupsByGroupIdAsync(int groupId) {
            return base.Channel.GetsSubGroupsByGroupIdAsync(groupId);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Group[] GetGroupsForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course) {
            return base.Channel.GetGroupsForCourse(faculty, course);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetGroupsForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course) {
            return base.Channel.GetGroupsForCourseAsync(faculty, course);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Group[] GetGroupsForSpeciality(Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality) {
            return base.Channel.GetGroupsForSpeciality(course, speciality);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Group[]> GetGroupsForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality) {
            return base.Channel.GetGroupsForSpecialityAsync(course, speciality);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByDeparmentId(Timetable.Host.Tests.PublishedDataService.Department department) {
            return base.Channel.GetLecturersByDeparmentId(department);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByDeparmentIdAsync(Timetable.Host.Tests.PublishedDataService.Department department) {
            return base.Channel.GetLecturersByDeparmentIdAsync(department);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByTutorialId(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial) {
            return base.Channel.GetLecturersByTutorialId(tutorial);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByTutorialIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial) {
            return base.Channel.GetLecturersByTutorialIdAsync(tutorial);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByTutorialIdAndTutorialTypeId(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType) {
            return base.Channel.GetLecturersByTutorialIdAndTutorialTypeId(tutorial, tutorialType);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByTutorialIdAndTutorialTypeIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType) {
            return base.Channel.GetLecturersByTutorialIdAndTutorialTypeIdAsync(tutorial, tutorialType);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Lecturer GetLecturerByFirstMiddleLastname(string arg) {
            return base.Channel.GetLecturerByFirstMiddleLastname(arg);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer> GetLecturerByFirstMiddleLastnameAsync(string arg) {
            return base.Channel.GetLecturerByFirstMiddleLastnameAsync(arg);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Lecturer[] GetLecturersByFirstMiddleLastname(string arg) {
            return base.Channel.GetLecturersByFirstMiddleLastname(arg);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Lecturer[]> GetLecturersByFirstMiddleLastnameAsync(string arg) {
            return base.Channel.GetLecturersByFirstMiddleLastnameAsync(arg);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForScheduleInfoes(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo) {
            return base.Channel.GetSchedulesForScheduleInfoes(scheduleInfo);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForScheduleInfoesAsync(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo) {
            return base.Channel.GetSchedulesForScheduleInfoesAsync(scheduleInfo);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo GetScheduleInfoById(int id) {
            return base.Channel.GetScheduleInfoById(id);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo> GetScheduleInfoByIdAsync(int id) {
            return base.Channel.GetScheduleInfoByIdAsync(id);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForCourse(faculty, course, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForCourseAsync(faculty, course, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForSpeciality(faculty, course, speciality, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForSpecialityAsync(faculty, course, speciality, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialtype, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForGroup(faculty, course, group, tutorialtype, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.TutorialType tutorialtype, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForGroupAsync(faculty, course, group, tutorialtype, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetScheduleInfoesForDepartment(Timetable.Host.Tests.PublishedDataService.Department department, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForDepartment(department, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetScheduleInfoesForDepartmentAsync(Timetable.Host.Tests.PublishedDataService.Department department, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetScheduleInfoesForDepartmentAsync(department, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.ScheduleInfo[] GetUnscheduledInfoes(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.Group group) {
            return base.Channel.GetUnscheduledInfoes(faculty, course, speciality, group);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.ScheduleInfo[]> GetUnscheduledInfoesAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.Group group) {
            return base.Channel.GetUnscheduledInfoesAsync(faculty, course, speciality, group);
        }
        
        public int CountScheduleCollisions(int day, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.WeekType weekType) {
            return base.Channel.CountScheduleCollisions(day, time, weekType);
        }
        
        public System.Threading.Tasks.Task<int> CountScheduleCollisionsAsync(int day, Timetable.Host.Tests.PublishedDataService.Time time, Timetable.Host.Tests.PublishedDataService.WeekType weekType) {
            return base.Channel.CountScheduleCollisionsAsync(day, time, weekType);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesByDayTime(int day, Timetable.Host.Tests.PublishedDataService.Time time) {
            return base.Channel.GetSchedulesByDayTime(day, time);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesByDayTimeAsync(int day, Timetable.Host.Tests.PublishedDataService.Time time) {
            return base.Channel.GetSchedulesByDayTimeAsync(day, time);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForCourse(faculty, course, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForCourseAsync(faculty, course, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForGroup(faculty, course, group, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForGroupAsync(faculty, course, group, studyYear, semester);
        }
        
        public int CountSchedulesForScheduleInfoes(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo) {
            return base.Channel.CountSchedulesForScheduleInfoes(scheduleInfo);
        }
        
        public System.Threading.Tasks.Task<int> CountSchedulesForScheduleInfoesAsync(Timetable.Host.Tests.PublishedDataService.ScheduleInfo scheduleInfo) {
            return base.Channel.CountSchedulesForScheduleInfoesAsync(scheduleInfo);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForSpeciality(faculty, course, speciality, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForSpecialityAsync(faculty, course, speciality, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForLecturer(Timetable.Host.Tests.PublishedDataService.Lecturer lecturer, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForLecturer(lecturer, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForLecturerAsync(Timetable.Host.Tests.PublishedDataService.Lecturer lecturer, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForLecturerAsync(lecturer, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule[] GetSchedulesForAuditorium(Timetable.Host.Tests.PublishedDataService.Auditorium auditorium, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForAuditorium(auditorium, studyYear, semester);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule[]> GetSchedulesForAuditoriumAsync(Timetable.Host.Tests.PublishedDataService.Auditorium auditorium, Timetable.Host.Tests.PublishedDataService.StudyYear studyYear, int semester) {
            return base.Channel.GetSchedulesForAuditoriumAsync(auditorium, studyYear, semester);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Schedule GetScheduleById(int id) {
            return base.Channel.GetScheduleById(id);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Schedule> GetScheduleByIdAsync(int id) {
            return base.Channel.GetScheduleByIdAsync(id);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Speciality[] GetSpecialities(Timetable.Host.Tests.PublishedDataService.Faculty faculty) {
            return base.Channel.GetSpecialities(faculty);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Speciality[]> GetSpecialitiesAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty) {
            return base.Channel.GetSpecialitiesAsync(faculty);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Time[] GetTimes(Timetable.Host.Tests.PublishedDataService.Building building) {
            return base.Channel.GetTimes(building);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Time[]> GetTimesAsync(Timetable.Host.Tests.PublishedDataService.Building building) {
            return base.Channel.GetTimesAsync(building);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Tutorial GetTutorialById(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial) {
            return base.Channel.GetTutorialById(tutorial);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial> GetTutorialByIdAsync(Timetable.Host.Tests.PublishedDataService.Tutorial tutorial) {
            return base.Channel.GetTutorialByIdAsync(tutorial);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForGroup(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group) {
            return base.Channel.GetTutorialsForGroup(faculty, course, group);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForGroupAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Group group) {
            return base.Channel.GetTutorialsForGroupAsync(faculty, course, group);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForSpeciality(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality) {
            return base.Channel.GetTutorialsForSpeciality(faculty, course, speciality);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForSpecialityAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course, Timetable.Host.Tests.PublishedDataService.Speciality speciality) {
            return base.Channel.GetTutorialsForSpecialityAsync(faculty, course, speciality);
        }
        
        public Timetable.Host.Tests.PublishedDataService.Tutorial[] GetTutorialsForCourse(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course) {
            return base.Channel.GetTutorialsForCourse(faculty, course);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.Tutorial[]> GetTutorialsForCourseAsync(Timetable.Host.Tests.PublishedDataService.Faculty faculty, Timetable.Host.Tests.PublishedDataService.Course course) {
            return base.Channel.GetTutorialsForCourseAsync(faculty, course);
        }
        
        public Timetable.Host.Tests.PublishedDataService.TutorialType[] GetTutorialTypes() {
            return base.Channel.GetTutorialTypes();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.TutorialType[]> GetTutorialTypesAsync() {
            return base.Channel.GetTutorialTypesAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.TutorialType GetTutorialTypeById(Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType) {
            return base.Channel.GetTutorialTypeById(tutorialType);
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.TutorialType> GetTutorialTypeByIdAsync(Timetable.Host.Tests.PublishedDataService.TutorialType tutorialType) {
            return base.Channel.GetTutorialTypeByIdAsync(tutorialType);
        }
        
        public Timetable.Host.Tests.PublishedDataService.WeekType[] GetWeekTypes() {
            return base.Channel.GetWeekTypes();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.WeekType[]> GetWeekTypesAsync() {
            return base.Channel.GetWeekTypesAsync();
        }
        
        public Timetable.Host.Tests.PublishedDataService.StudyYear[] GetStudyYears() {
            return base.Channel.GetStudyYears();
        }
        
        public System.Threading.Tasks.Task<Timetable.Host.Tests.PublishedDataService.StudyYear[]> GetStudyYearsAsync() {
            return base.Channel.GetStudyYearsAsync();
        }
    }
}
